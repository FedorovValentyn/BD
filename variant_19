/*ЕКЗАМЕНАЦІЙНИЙ БІЛЕТ № 19
1. Особливості таблиць типу InnoDB. Поняття цілісності даних і каскадних
операцій. Реалізація цілісності і каскадних операцій в таблицях InnoDB. (10 балів)

  Таблиці InnoDB в MySQL обладнані обробником таблиць, який забезпечує безпечні транзакції (рівень ACID) з можливістю фіксації, відкату та відновлення після збою. Для InnoDB характерна блокування на рівні рядка, а також використання методу читання без блокування в команді SELECT (аналогічного до Oracle). Це поліпшує взаємодію та продуктивність в багатокористувацькому режимі. InnoDB не вимагає розширення блокування, оскільки блоки рядків в InnoDB займають мало місця. Для таблиць InnoDB підтримуються обмежувальні умови FOREIGN KEY.

InnoDB призначена для досягнення максимальної продуктивності при обробці великих обсягів даних. Вона значно перевершує інші моделі реляційних баз даних із пам'яттю на дисках за ефективністю використання процесора.

Технічно InnoDB є повноцінною системою управління базою даних в рамках MySQL. У InnoDB є свій власний буферний пул для кешування даних та індексів в оперативній пам'яті. Таблиці та індекси InnoDB зберігаються в спеціальному просторі пам'яті, який може складатися з кількох файлів, на відміну від таблиць MyISAM, де кожна таблиця зберігається в окремому файлі. Таблиці InnoDB можуть мати будь-який розмір, навіть в операційних системах із обмеженням розміру файлу на рівні 2 ГБ.

Цілісність даних є важливою властивістю SQL. Забезпечуючи коректність та валідність даних, обмеження грають важливу роль в базі даних. В ANSI існує 4 основних види обмежень: PRIMARY KEY, CHECK, UNIQUE і FOREIGN KEY. Вони не обов'язкові для таблиці.

PRIMARY KEY визначає унікальний набір полів, які ідентифікують запис у таблиці. Для таблиці може бути лише одне таке обмеження, і воно використовується для забезпечення цілісності сутності, описаної таблицею.

CHECK використовується для обмеження множини значень, які можуть бути введені у конкретний стовпець. Це обмеження застосовується для забезпечення цілісності предметної області, описаної таблицями у базі.

UNIQUE обмеження гарантує відсутність дублікатів у стовпці чи наборі стовпців.

FOREIGN KEY захищає від дій, які можуть порушити зв'язки між таблицями. FOREIGN KEY в одній таблиці вказує на PRIMARY KEY в іншій, забезпечуючи, що записи FOREIGN KEY відповідають записам PRIMARY KEY. Таким чином, FOREIGN KEY підтримує цілісність даних.

Якщо вам подобаються терміни "Parent" та "Child" і ви вважаєте, що їх легко запам'ятовувати, ви можете перекладати ON DELETE CASCADE як "Leave no orphans!". Це означає, що при видаленні рядка з головної таблиці не повинно залишитися жодної "сироти". Усі дочірні елементи головного ряду також будуть видалені. Якщо у якого-небудь із цих дітей є онуки (в іншій таблиці через інший зовнішній ключ) і вони там визначені як ON DELETE CASCADE, їх також слід убити (а також всіх їх нащадків, якщо визначено каскадний ефект).

Саме обмеження FOREIGN KEY також може бути описане як "Leave no orphans!" (визначаючи спочатку). Жодне "Child" не повинно бути дозволено вставляти в дочірню таблицю, якщо воно не має "Parent" (рядок в головній таблиці).

Для сумісності ON DELETE RESTRICT можна перекласти як (менш агресивний) "You can’t kill parents!" Тільки бездітні рядки можна видалити.

Каскадне видалення дозволяє автоматично видаляти всі пов'язані рядки залежної таблиці при видаленні рядка з головної таблиці. Для цього використовується опція CASCADE




2. Значення та синтаксис функції CONCAT(), приклад. (10 балів)

  Функція CONCAT() додає разом два або більше вирази. Синтаксис:
CONCAT(value_1, value_2,...,value_n)
value_1, value_2,...,value_n - це елементи будь-якого типу даних, які потрібно об’єднати в одну строку.
Приклад:
CONCAT('a', 'b', 'c')
Результат:
‘abc’

3. Практичне завдання (20 балів).
Відповідно до виданих таблиць створити в MySQL базу даних.
Створити до бази наступні запити:
 запит про замовлення товарів за третій квартал. Динамічний набір записів
повинен містити такі поля: Номер замовлення, Найменування товару, Назва
фірми, Кількість, Ціна, Вартість. Дані впорядкувати по алфавіту назв фірм,
а в межах однієї групи – по назві товару.
 груповий запит, що виводить загальну кількість контрактів для кожної
фірми.
 запит на зовнішнє об’єднання, який повинен містити товари, які не
замовляла фірма ТОВ "Impression".
Вартість розраховуються як добуток ціни товару на кількість замовленого товару. Якщо
Вид замовлення “Самовивіз”, то ціна зменшується на 3,5%, в іншому випадку - ціна
залишається незмінною*/



CREATE DATABASE variant_19;

USE variant_19;

CREATE TABLE firm_dov(
    firm_id INT PRIMARY KEY,
    firm_name VARCHAR(55),
    firm_address VARCHAR(55),
    firm_code VARCHAR(55)
);

CREATE TABLE orders(
    order_id INT PRIMARY KEY,
    order_firm_id INT,
    order_type INT,
    order_date DATE,
    order_payment_date DATE
    );

CREATE TABLE items(
    item_id INT PRIMARY KEY,
    item_name VARCHAR(70),
    item_price INT
    );

CREATE TABLE orders_info(
    orders_info_uniq INT PRIMARY KEY AUTO_INCREMENT,
    orders_info_id INT,
    orders_info_item_id INT,
    orders_info_quantity INT
);

CREATE TABLE types(
    type_id INT PRIMARY KEY,
    type_name VARCHAR(35)
);


ALTER TABLE orders
ADD CONSTRAINT firm_id_orders
FOREIGN KEY (order_firm_id) REFERENCES firm_dov(firm_id),
ADD CONSTRAINT type_orders
FOREIGN KEY (order_type) REFERENCES types(type_id);

ALTER TABLE orders_info
ADD CONSTRAINT orders_item_id
FOREIGN KEY (orders_info_item_id) REFERENCES items(item_id),
ADD CONSTRAINT orders_order_id
FOREIGN KEY (orders_info_id) REFERENCES orders(order_id);

# 1

SELECT order_id, item_name, firm_name, orders_info_quantity, item_price,
       IF(type_id = 2, item_price * orders_info_quantity * 0.965, item_price * orders_info_quantity) AS cost
FROM
    orders
JOIN orders_info  ON order_id = orders_info_id
JOIN items ON orders_info_item_id = item_id
JOIN firm_dov ON order_firm_id = firm_id
JOIN types ON order_type = type_id

WHERE MONTH(order_date) > 6 AND MONTH(order_date) < 10;

# 2

SELECT
    firm_name,
    COUNT(order_id) AS total_orders
FROM
    orders
JOIN
    firm_dov ON order_firm_id = firm_id
GROUP BY
    firm_name;

#3

SELECT DISTINCT item_id, item_name
FROM items
LEFT JOIN orders_info  ON item_id = orders_info_item_id
LEFT JOIN orders  ON orders_info_id = order_id
WHERE order_firm_id != (
    SELECT firm_id
    FROM firm_dov
    WHERE firm_name = 'ТОV "Impression"'
)
OR order_firm_id IS NULL;