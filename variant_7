/*ЕКЗАМЕНАЦІЙНИЙ БІЛЕТ № 7
1. Команди додавання записів в таблицю MySQL. Варіанти написання команди. (10
балів)
Записи можна додавати до таблиці за допомогою команди INSERT INTO. Існують кілька варіантів написання цієї команди
в залежності від того, які дані треба додати та звідки вони поступають:
Додавання значень у всі стовпці таблиці:
INSERT INTO table_name VALUES (value1, value2, value3, ...);
Додавання значень у певні стовпці таблиці:
INSERT INTO table_name (column1, column2, column3, ...) VALUES (value1, value2, value3, ...);
Додавання значень з результатом запиту SELECT:
INSERT INTO table_name (column1, column2, column3, ...) SELECT value1, value2, value3, ... FROM other_table;


2. Значення та синтаксис функції CASE(), приклад. (10 балів)
Функція CASE використовується для реалізації умовної логіки, де можна визначати різні дії в залежності від умови.
Синтаксис CASE виглядає так:
CASE
WHEN condition1 THEN result1
WHEN condition2 THEN result2
...
ELSE else_result
END
Наприклад, якщо ми хочемо створити новий стовпець status на основі значення стовпця points у таблиці users:
SELECT CASE
WHEN points > 100 THEN 'Gold'
WHEN points > 50 THEN 'Silver'
ELSE 'Bronze'
END AS status FROM users;



3. Практичне завдання (20 балів).
Відповідно до виданих таблиць створити в MySQL базу даних.
Створити до бази наступні запити:
 запит про замовлення товарів. Динамічний набір записів повинен містити
такі поля: Номер замовлення, Найменування товару, Назва фірми, Кількість,
Ціна, Вартість. Дані впорядкувати по алфавіту назв фірм, а в межах однієї
групи – по назві товару.
 груповий запит, що виводить загальну кількість замовлень для кожної
фірми.
 запит на зовнішнє об’єднання, який повинен містити товари, які не
замовляла фірма ТОВ СП "Росан" .
Вартість розраховуються як добуток ціни товару на кількість замовленого товару. Якщо
Вид замовлення “Самовивіз”, то ціна зменшується на 3,5%, в іншому випадку - ціна
залишається незмінною*/


CREATE DATABASE variant_7;

USE variant_7;

CREATE TABLE firms(
    firm_id INT PRIMARY KEY,
    firm_name VARCHAR(55),
    firm_address VARCHAR(55),
    firm_code NUMERIC
);

CREATE TABLE orders(
    order_id INT PRIMARY KEY,
    order_firm_id INT,
    order_type_id INT,
    order_date DATE,
    order_payment_date DATE
);

CREATE TABLE items(
    item_id INT PRIMARY KEY,
    item_name VARCHAR(55),
    item_price INT
);

CREATE TABLE contracts(
    contract_uniq INT PRIMARY KEY AUTO_INCREMENT,
    contract_order_id INT,
    contract_item_id INT,
    contract_quantity INT
);

CREATE TABLE types(
    type_id INT PRIMARY KEY,
    type_name VARCHAR(55)
);


ALTER TABLE orders
ADD CONSTRAINT order_firm_id_fk
FOREIGN KEY (order_firm_id) REFERENCES firms(firm_id),
ADD CONSTRAINT order_type_id_fk
FOREIGN KEY (order_type_id) REFERENCES types(type_id);


ALTER TABLE contracts
ADD CONSTRAINT contract_order_id_fk
FOREIGN KEY (contract_order_id) REFERENCES orders(order_id),
ADD CONSTRAINT contract_item_id_fk
FOREIGN KEY (contract_item_id) REFERENCES items(item_id);


#1
SELECT
    order_id AS order_number,
    item_name AS item_name,
    firm_name AS firm_name,
    contract_quantity AS quantity,
    item_price AS price,
    IF(type_id = 2, contract_quantity * item_price * 0.965, contract_quantity * item_price) AS total_value
FROM orders
JOIN contracts ON order_id = contract_order_id
JOIN items ON contract_item_id = item_id
JOIN firms ON order_firm_id = firm_id
JOIN types ON order_type_id = type_id
ORDER BY firm_name ASC, item_name ASC;


#2
SELECT
    firm_name AS firm_name,
    COUNT(order_id) AS total_orders
FROM firms
LEFT JOIN orders ON firm_id = order_firm_id
GROUP BY firm_name;

#3
SELECT DISTINCT
    item_id AS "ID Товару",
    item_name AS "Назва Товару"
FROM
    items
WHERE
    item_id NOT IN (
        SELECT item_id
        FROM items
        JOIN contracts ON item_id = contract_item_id
        JOIN orders ON contract_order_id = order_id
        JOIN firms ON order_firm_id = firm_id
        WHERE firm_name = 'TOV SP "Rosan"'
    );

