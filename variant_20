/*ЕКЗАМЕНАЦІЙНИЙ БІЛЕТ № 20
1. Поняття індексу і індексування. Переваги індексованих таблиць. Правила
відбору стовпців для індексування. (10 балів)

Індекс — об'єкт бази даних, що створений з метою підвищення ефективності виконання запитів.
Таблиці в базі даних можуть мати велику кількість рядків, які зберігаються у довільному порядку,
і їх пошук за заданим значенням шляхом послідовного перегляду таблиці рядок за рядком може займати багато часу.
Індекс формується зі значень одного чи кількох стовпчиків таблиці і вказівників на відповідні рядки таблиці і,
таким чином, дозволяє знаходити потрібний рядок за заданим значенням. Прискорення роботи з використанням індексів
досягається в першу чергу за рахунок того, що індекс має структуру, що оптимізована для пошуку — наприклад,
збалансованого дерева.

Тобто індекси в базі даних використовуються для оптимізації виконання запитів.
Замість послідовного перегляду рядків таблиці, індекс формується зі значень стовпчиків
та вказівників на відповідні рядки, що дозволяє ефективно знаходити потрібні дані за
заданим значенням. Вони можуть бути створені як унікальні або не унікальні, і використовуються для
прискорення операцій вибірки (SELECT), але можуть сповільнювати вставку та оновлення записів (INSERT, UPDATE).
Індекси можна порівняти з вказівниками в книзі, де вони полегшують пошук інформації за певною темою, але вносять
певне ускладнення при додаванні чи зміні записів.


2. Значення та синтаксис функції CONCAT_WS(), приклад. (10 балів)

Функція CONCAT_WS() додає два або більше вирази разом із роздільником. Синтаксис:
CONCAT_WS(separator, value_1, value_2,...,value_n)
separator - символ який буде розділяти елементи.
value_1, value_2,...,value_n - це елементи будь-якого типу даних, які потрібно об’єднати в одну строку.
Приклад:
SELECT CONCAT_WS("-", "SQL", "Tutorial", "is", "fun!") AS ConcatenatedString;
Результат:
SQL-Tutorial-is-fun!


3. Практичне завдання (20 балів).
Відповідно до виданих таблиць створити в MySQL базу даних.
Створити до бази наступні запити:
 запит про три найбільші по кількості постачання товарів EPSON або
Samsung. Динамічний набір записів повинен містити такі поля: Номер
контракту, Назва дистриб’ютора, Адреса дистриб’ютора, Кількість, Шифр.
 груповий запит, що виводить загальну вартість товарів, у яких кількість
менше за середню кількість по всім контрактам.
 Створити перехресний запит, який би відтворювався наступною таблицею:
Найменування товару Seiko EPSON
Corporation …
Samsung Brands
Electronis
Сканер HP Scanjet 2200c Загальна вартість … Загальна вартість
… … … …
Монітор 19" Samsung
SyncMaster 957DFX
Загальна вартість … Загальна вартість
Вартість розраховуються як добуток ціни товару на кількість поставленого товару на
коефіцієнт перерахунку. Якщо код валюти поставленого товару дорівнює 001, то
коефіцієнт перерахунку дорівнює 7,45, в іншому випадку дорівнює 1*/


CREATE DATABASE variant_20;

USE variant_20;

CREATE TABLE items(
    item_id INT PRIMARY KEY,
    item_name VARCHAR(55),
    item_type_code INT,
    item_price INT,
    item_valute_code VARCHAR(10)
);

CREATE TABLE dist(
    dist_id INT PRIMARY KEY,
    dist_name VARCHAR(55),
    dist_address VARCHAR(55)
);

CREATE TABLE contracts(
    contract_id INT PRIMARY KEY,
    contract_dist_id INT,
    contract_item_id INT,
    contract_quantity INT
);

CREATE TABLE valute(
    valute_id VARCHAR(3) PRIMARY KEY,
    valute_name VARCHAR(55),
    valute_short VARCHAR(3)
);

CREATE TABLE types(
    type_code INT PRIMARY KEY,
    type_name VARCHAR(55)
);


ALTER TABLE items
ADD CONSTRAINT item_type_code_fk
FOREIGN KEY (item_type_code) REFERENCES types(type_code),
ADD CONSTRAINT item_valute_code_fk
FOREIGN KEY (item_valute_code) REFERENCES valute(valute_id);

ALTER TABLE contracts
ADD CONSTRAINT contract_dist_code_fk
FOREIGN KEY (contract_dist_id) REFERENCES dist(dist_id),
ADD CONSTRAINT contracts_item_code_fk
FOREIGN KEY (contract_item_id) REFERENCES items(item_id);

#1
SELECT
    contract_id AS "Номер контракту",
    dist_name AS "Назва дистриб'ютора",
    dist_address AS "Адреса дистриб'ютора",
    contract_quantity AS "Кількість",
    valute_short AS "Шифр"
FROM
    contracts
JOIN dist ON contract_dist_id = dist_id
JOIN items ON contract_item_id = item_id
JOIN valute ON item_valute_code = valute_id
WHERE
    item_name LIKE '%EPSON%' OR item_name LIKE '%Samsung%'
ORDER BY
    contract_quantity DESC
LIMIT 3;


#2
SELECT
    item_name AS "Назва товару",
    SUM(IF(item_valute_code = 001, contract_quantity * item_price * 7.45, contract_quantity * item_price)) AS "Загальна вартість"
FROM
    contracts
JOIN items ON contract_item_id = item_id
WHERE
    contract_quantity < (SELECT AVG(contract_quantity) FROM contracts)
GROUP BY
    item_name;

#3


SELECT
    item_name AS "Найменування товару",
    SUM( CASE WHEN item_name LIKE '%EPSON%' THEN contract_quantity * item_price *
        CASE
            WHEN item_valute_code = 1 THEN 7.45
            ELSE 1
        END
    ELSE 0 END) AS "Seiko EPSON Corporation",
    SUM(CASE WHEN item_name LIKE '%Samsung%' THEN contract_quantity * item_price *
        CASE
            WHEN item_valute_code = 1 THEN 7.45
            ELSE 1
        END
    ELSE 0 END) AS "Samsung Brands Electronis",
     SUM(CASE WHEN item_name LIKE '%HP%' THEN contract_quantity * item_price *
        CASE
            WHEN item_valute_code = 1 THEN 7.45
            ELSE 1
        END
    ELSE 0 END) AS "Hewlett-Pacrard"
FROM
    contracts
JOIN items ON contract_item_id = item_id
GROUP BY
    item_name;


